/**
 * Boost Software License - Version 1.0 - August 17th, 2003
 * Permission is hereby granted, free of charge, to any person
 * or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license 
 * (the "Software") to use, reproduce, display, distribute, 
 * execute, and transmit the Software, and to prepare derivative 
 * works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, 
 * including the above license grant, this restriction and the following 
 * disclaimer, must be included in all copies of the Software, in whole or 
 * in part, and all derivative works of the Software, unless such copies 
 * or derivative works are solely in the form of machine-executable 
 * object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND 
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */

#include <istream>
#include <ostream>

#include "../bigint.hpp"

namespace libbig {
  largeInt &operator += (largeInt a) {
        largeInt res;
        string s1 = this.number;
        string s2 = a.number;
        res = addLargeInt(s1, s2);
        return res;
    }
    largeInt &operator += (int a) {
        largeInt res;
        string s1 = this.number;
        string s2 = std::to_string(a);
        res = addLargeInt(s1, s2);
        return res;
    }
    largeInt &operator += (int64_t a) {
        largeInt res;
        string s1 = this.number;
        string s2 = std::to_string(a);
        res = addLargeInt(s1, s2);
        return res;
    }
    largeInt &operator += (long long a) {
        largeInt res;
        string s1 = this.number;
        string s2 = std::to_string(a);
        res = addLargeInt(s1, s2);
        return res;
    }

    largeInt addLargeInt(string s1, string s2) {
        largeInt temp;
        string tempS = "";
        if (s1.length > s2.length) {
            tempS = s1;
            s1 = s2;
            s2 = tempS;
        }
        reverse(s1.begin(), s1.end());
        reverse(s2.begin(), s2.end());

        int carry = 0;

        for (int i=0; i<s1.length(); i++) {
            int sum = ((s1[i] - '0') + (s2[i] - '0') + carry);
            temp.number.push_back(sum%10 + '0');

            carry = sum / 10;
        }

        for (int i=n1; i<n2; i++) {
            int sum = ((str2[i] - '0') + carry);
            str.push_back(sum % 10 + '0');
            carry = sum / 10;
        }

        if (carry) {
            str.push_back(carry + '0');
        }

        reverse(temp.number.begin(), temp.number.end());

        return temp;
    }
} // namespace libbig

